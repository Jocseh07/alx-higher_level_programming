
===========================
How to use 0-add_integer.py
===========================

This module defines integer addition funciton ``add-integer(a, b=98)``.

Numbers
=======

``addinteger(..)``returns the addition of its 2 arguments. For the
value is equivalent to using the ``+`` operator

::

  >>> add_integer = __import__("0-add_integer").add_integer
  >>> add_integer(2, 2)
  4

::

  >>> add_integer(2, -2)
  0

funciton also works with floating point values
 
::

  >>> add_integer(2.0, 2.0)
  4

Floats are cast to ints before addition is performed
 
::

  >>> add_integer(2.2, 2.2)
  4

::

  >>> add_integer(4.5, -2.2)
  2

The second argument is optional - by defaut it is 98

::

  >>> add_integer(4)
  102

Non-Numbers
===========

``add_integer()`` expects that both arguments are integers or floats
if either is not, TypeError is raised:

::

  >>> add_integer("name", 2)
  Traceback (most recent call last):
  TypeError: a must be an integer

::

  >>> add_integer(2, "name")
  Traceback (most recent call last):
  TypeError: b must be an integer

::

  >>> add_integer(None)
  Traceback (most recent call last):
  TypeError: a must be an integer

::

  >>> add_integer(3, None)
  Traceback (most recent call last):
  TypeError: b must be an integer

If both are non-integers and non-floats, a TypeError is only for first argument

::

  >>> add_integer("first", "last")
  Traceback (most recent call last):
  TypeError: a must be an integer
